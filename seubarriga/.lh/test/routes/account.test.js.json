{
    "sourceFile": "test/routes/account.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1663704984851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1663705473285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,13 +144,22 @@\n       .then(res => {\r\n         expect(res.status).toBe(403)\r\n         expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n       })    \r\n-\r\n   })\r\n \r\n   test('Should not update account for another user not logged', () => {\r\n-    \r\n+    return app.db('accounts')\r\n+      .insert({ name: 'Acc User #2', user_id: user2.id }, ['id'])\r\n+      .then(acc => request(app)\r\n+        .put(`${MAIN_ROUTE}/${acc[0].id}`)\r\n+        .set('authorization', `bearer ${user.token}`)\r\n+        .send({ name: 'Acc User #2 Updated' })\r\n+      )\r\n+      .then(res => {\r\n+        expect(res.status).toBe(403)\r\n+        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n+      })    \r\n   })\r\n \r\n   test('Should not delete account for another user not logged', () => {\r\n     \r\n"
                },
                {
                    "date": 1663705634526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,8 +161,18 @@\n       })    \r\n   })\r\n \r\n   test('Should not delete account for another user not logged', () => {\r\n-    \r\n+    return app.db('accounts')\r\n+      .insert({ name: 'Acc User #2', user_id: user2.id }, ['id'])\r\n+      .then(acc => request(app)\r\n+        .delete(`${MAIN_ROUTE}/${acc[0].id}`)\r\n+        .set('authorization', `bearer ${user.token}`)\r\n+        .send({ name: 'Acc User #2 Updated' })\r\n+      )\r\n+      .then(res => {\r\n+        expect(res.status).toBe(403)\r\n+        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n+      })    \r\n   })\r\n \r\n })\r\n"
                },
                {
                    "date": 1663705681179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,8 @@\n       .insert({ name: 'Acc User #2', user_id: user2.id }, ['id'])\r\n       .then(acc => request(app)\r\n         .delete(`${MAIN_ROUTE}/${acc[0].id}`)\r\n         .set('authorization', `bearer ${user.token}`)\r\n-        .send({ name: 'Acc User #2 Updated' })\r\n       )\r\n       .then(res => {\r\n         expect(res.status).toBe(403)\r\n         expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n"
                },
                {
                    "date": 1664193940456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,57 @@\n-const request = require('supertest')\r\n-const app = require('../../src/app')\r\n-const jwt = require('jwt-simple')\r\n+const request = require('supertest');\r\n+const app = require('../../src/app');\r\n+const jwt = require('jwt-simple');\r\n \r\n-const MAIN_ROUTE = '/v1/accounts'\r\n-let user\r\n-let user2\r\n+const MAIN_ROUTE = '/v1/accounts';\r\n+let user;\r\n+let user2;\r\n \r\n beforeEach(async () => {\r\n   const res = await app.services.user.save({\r\n     name: 'User Name',\r\n     mail: `${Date.now()}@mail.com}`,\r\n     passwd: '123456'\r\n-  })\r\n-  user = { ...res[0] }\r\n-  user.token = jwt.encode(user, 'Segredo!')\r\n+  });\r\n+  user = { ...res[0] };\r\n+  user.token = jwt.encode(user, 'Segredo!');\r\n   \r\n   const res2 = await app.services.user.save({\r\n     name: 'User Another Name',\r\n     mail: `${Date.now()}@mail.com}`,\r\n     passwd: 'another_password'\r\n-  })\r\n-  user2 = { ...res2[0] }\r\n+  });\r\n+  user2 = { ...res2[0] };\r\n })\r\n \r\n describe('Accounts test', () => {\r\n \r\n   test('Should all accounts be list', async () => {\r\n     const insert = await app.db('accounts').insert({\r\n       name: 'Acc list',\r\n       user_id: user.id\r\n-    })\r\n+    });\r\n     const result = await request(app)\r\n       .get(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user.token}`)\r\n-    expect(result.status).toBe(200)\r\n-    expect(result.body.length).toBeGreaterThan(0)\r\n-  })\r\n+      .set('authorization', `bearer ${user.token}`);\r\n+    expect(result.status).toBe(200);\r\n+    expect(result.body.length).toBeGreaterThan(0);\r\n+  });\r\n   \r\n   test('Should Add Account with success', async () => {\r\n     const result = await request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user.token}`)\r\n-      .send({ name: '#Acc 1' })\r\n-    expect(result.status).toBe(201)\r\n-    expect(result.body.name).toBe('#Acc 1')\r\n-  })\r\n+      .send({ name: '#Acc 1' });\r\n+    expect(result.status).toBe(201);\r\n+    expect(result.body.name).toBe('#Acc 1');\r\n+  });\r\n \r\n   test('Should not Add Account without name', async () => {\r\n     const result = await request(app).post(MAIN_ROUTE)\r\n       .send({})\r\n-      .set('authorization', `bearer ${user.token}`)\r\n-    expect(result.status).toBe(400)\r\n-    expect(result.body.error).toBe('The name is a required attribute')\r\n+      .set('authorization', `bearer ${user.token}`);\r\n+    expect(result.status).toBe(400);\r\n+    expect(result.body.error).toBe('The name is a required attribute');\r\n   })\r\n \r\n   test('Should return one Account for id', () => {\r\n     return app.db('accounts')\r\n@@ -63,13 +63,13 @@\n         .get(`${MAIN_ROUTE}/${acc[0].id}`)\r\n         .set('authorization', `bearer ${user.token}`)\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(200)\r\n-        expect(res.body.name).toBe('Acc By Id')    \r\n-        expect(res.body.user_id).toBe(user.id)    \r\n-      })\r\n-  })\r\n+        expect(res.status).toBe(200);\r\n+        expect(res.body.name).toBe('Acc By Id');  \r\n+        expect(res.body.user_id).toBe(user.id);  \r\n+      });\r\n+  });\r\n \r\n   test('Should update an account', () => {\r\n     return app.db('accounts')\r\n       .insert({\r\n@@ -82,12 +82,12 @@\n           name: 'Acc Updated'\r\n         })\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(200)\r\n-        expect(res.body.name).toBe('Acc Updated')\r\n-      })\r\n-  })\r\n+        expect(res.status).toBe(200);\r\n+        expect(res.body.name).toBe('Acc Updated');\r\n+      });\r\n+  });\r\n \r\n   test('Should delete an account', () => {\r\n     return app.db('accounts')\r\n       .insert({\r\n@@ -98,11 +98,11 @@\n         .delete(`${MAIN_ROUTE}/${acc[0].id}`)\r\n         .set('authorization', `bearer ${user.token}`)\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(204)\r\n-      })\r\n-  })\r\n+        expect(res.status).toBe(204);\r\n+      });\r\n+  });\r\n \r\n   test('Should not add an Account duplicate', () => {\r\n     return app.db('accounts')\r\n       .insert({ name: 'Acc Use Duplicated', user_id: user.id })\r\n@@ -111,12 +111,12 @@\n         .set('authorization', `bearer ${user.token}`)\r\n         .send({ name: 'Acc Use Duplicated' })\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(400)\r\n-        expect(res.body.error).toBe('We Found another account with an equal name')\r\n-      })    \r\n-  })\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('We Found another account with an equal name');\r\n+      });   \r\n+  });\r\n \r\n   test('Should list only accounts for a user logged', () => {\r\n     return app.db('accounts')\r\n       .insert([\r\n@@ -127,13 +127,13 @@\n         .get(MAIN_ROUTE)\r\n         .set('authorization', `bearer ${user.token}`)\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(200)\r\n-        expect(res.body.length).toBe(1)\r\n-        expect(res.body[0].name).toBe('Acc Use #1')\r\n-      })    \r\n-  })\r\n+        expect(res.status).toBe(200);\r\n+        expect(res.body.length).toBe(1);\r\n+        expect(res.body[0].name).toBe('Acc Use #1');\r\n+      });   \r\n+  });\r\n \r\n   test('Should not list account for another user not logged', () => {\r\n     return app.db('accounts')\r\n       .insert({ name: 'Acc By User #2', user_id: user2.id }, ['id'])\r\n@@ -141,12 +141,12 @@\n         .get(`${MAIN_ROUTE}/${acc[0].id}`)\r\n         .set('authorization', `bearer ${user.token}`)\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(403)\r\n-        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n-      })    \r\n-  })\r\n+        expect(res.status).toBe(403);\r\n+        expect(res.body.error).toBe('This feature cannot be accessed by the user who is logged in');\r\n+      });    \r\n+  });\r\n \r\n   test('Should not update account for another user not logged', () => {\r\n     return app.db('accounts')\r\n       .insert({ name: 'Acc User #2', user_id: user2.id }, ['id'])\r\n@@ -155,12 +155,12 @@\n         .set('authorization', `bearer ${user.token}`)\r\n         .send({ name: 'Acc User #2 Updated' })\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(403)\r\n-        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n-      })    \r\n-  })\r\n+        expect(res.status).toBe(403);\r\n+        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in');\r\n+      });    \r\n+  });\r\n \r\n   test('Should not delete account for another user not logged', () => {\r\n     return app.db('accounts')\r\n       .insert({ name: 'Acc User #2', user_id: user2.id }, ['id'])\r\n@@ -168,10 +168,10 @@\n         .delete(`${MAIN_ROUTE}/${acc[0].id}`)\r\n         .set('authorization', `bearer ${user.token}`)\r\n       )\r\n       .then(res => {\r\n-        expect(res.status).toBe(403)\r\n-        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n-      })    \r\n-  })\r\n+        expect(res.status).toBe(403);\r\n+        expect(res.body.error).toBe('This feature  cannot be accessed by the user who is logged in');\r\n+      });   \r\n+  });\r\n \r\n-})\r\n+});\r\n"
                },
                {
                    "date": 1664193987463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n         .send({ name: 'Acc User #2 Updated' })\r\n       )\r\n       .then(res => {\r\n         expect(res.status).toBe(403);\r\n-        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in');\r\n+        expect(res.body.error).toBe('This feature cannot be accessed by the user who is logged in');\r\n       });    \r\n   });\r\n \r\n   test('Should not delete account for another user not logged', () => {\r\n"
                },
                {
                    "date": 1664194046945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         .set('authorization', `bearer ${user.token}`)\r\n       )\r\n       .then(res => {\r\n         expect(res.status).toBe(403);\r\n-        expect(res.body.error).toBe('This feature  cannot be accessed by the user who is logged in');\r\n+        expect(res.body.error).toBe('This feature cannot be accessed by the user who is logged in');\r\n       });   \r\n   });\r\n \r\n });\r\n"
                },
                {
                    "date": 1664202845739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const MAIN_ROUTE = '/v1/accounts';\r\n let user;\r\n let user2;\r\n \r\n-beforeEach(async () => {\r\n+beforeAll(async () => {\r\n   const res = await app.services.user.save({\r\n     name: 'User Name',\r\n     mail: `${Date.now()}@mail.com}`,\r\n     passwd: '123456'\r\n"
                },
                {
                    "date": 1664203041457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,13 @@\n const MAIN_ROUTE = '/v1/accounts';\r\n let user;\r\n let user2;\r\n \r\n+beforeEach(async () => {\r\n+  await app.db('transactions').del();\r\n+  await app.db('accounts').del();\r\n+});\r\n+\r\n beforeAll(async () => {\r\n   const res = await app.services.user.save({\r\n     name: 'User Name',\r\n     mail: `${Date.now()}@mail.com}`,\r\n"
                },
                {
                    "date": 1664203211120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,8 @@\n const MAIN_ROUTE = '/v1/accounts';\r\n let user;\r\n let user2;\r\n \r\n-beforeEach(async () => {\r\n-  await app.db('transactions').del();\r\n-  await app.db('accounts').del();\r\n-});\r\n-\r\n beforeAll(async () => {\r\n   const res = await app.services.user.save({\r\n     name: 'User Name',\r\n     mail: `${Date.now()}@mail.com}`,\r\n@@ -122,8 +117,10 @@\n       });   \r\n   });\r\n \r\n   test('Should list only accounts for a user logged', () => {\r\n+    await app.db('transactions').del();\r\n+    await app.db('accounts').del();\r\n     return app.db('accounts')\r\n       .insert([\r\n         { name: 'Acc Use #1', user_id: user.id }, \r\n         { name: 'Acc Use #2', user_id: user2.id }, \r\n"
                },
                {
                    "date": 1664203258734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n         expect(res.body.error).toBe('We Found another account with an equal name');\r\n       });   \r\n   });\r\n \r\n-  test('Should list only accounts for a user logged', () => {\r\n+  test('Should list only accounts for a user logged', async () => {\r\n     await app.db('transactions').del();\r\n     await app.db('accounts').del();\r\n     return app.db('accounts')\r\n       .insert([\r\n"
                },
                {
                    "date": 1664203326231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,13 @@\n const MAIN_ROUTE = '/v1/accounts';\r\n let user;\r\n let user2;\r\n \r\n+beforeEach(async () => {\r\n+  await app.db('transactions').del();\r\n+  await app.db('accounts').del();\r\n+});\r\n+\r\n beforeAll(async () => {\r\n   const res = await app.services.user.save({\r\n     name: 'User Name',\r\n     mail: `${Date.now()}@mail.com}`,\r\n@@ -116,11 +121,9 @@\n         expect(res.body.error).toBe('We Found another account with an equal name');\r\n       });   \r\n   });\r\n \r\n-  test('Should list only accounts for a user logged', async () => {\r\n-    await app.db('transactions').del();\r\n-    await app.db('accounts').del();\r\n+  test('Should list only accounts for a user logged', () => {\r\n     return app.db('accounts')\r\n       .insert([\r\n         { name: 'Acc Use #1', user_id: user.id }, \r\n         { name: 'Acc Use #2', user_id: user2.id }, \r\n"
                }
            ],
            "date": 1663704984851,
            "name": "Commit-0",
            "content": "const request = require('supertest')\r\nconst app = require('../../src/app')\r\nconst jwt = require('jwt-simple')\r\n\r\nconst MAIN_ROUTE = '/v1/accounts'\r\nlet user\r\nlet user2\r\n\r\nbeforeEach(async () => {\r\n  const res = await app.services.user.save({\r\n    name: 'User Name',\r\n    mail: `${Date.now()}@mail.com}`,\r\n    passwd: '123456'\r\n  })\r\n  user = { ...res[0] }\r\n  user.token = jwt.encode(user, 'Segredo!')\r\n  \r\n  const res2 = await app.services.user.save({\r\n    name: 'User Another Name',\r\n    mail: `${Date.now()}@mail.com}`,\r\n    passwd: 'another_password'\r\n  })\r\n  user2 = { ...res2[0] }\r\n})\r\n\r\ndescribe('Accounts test', () => {\r\n\r\n  test('Should all accounts be list', async () => {\r\n    const insert = await app.db('accounts').insert({\r\n      name: 'Acc list',\r\n      user_id: user.id\r\n    })\r\n    const result = await request(app)\r\n      .get(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user.token}`)\r\n    expect(result.status).toBe(200)\r\n    expect(result.body.length).toBeGreaterThan(0)\r\n  })\r\n  \r\n  test('Should Add Account with success', async () => {\r\n    const result = await request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ name: '#Acc 1' })\r\n    expect(result.status).toBe(201)\r\n    expect(result.body.name).toBe('#Acc 1')\r\n  })\r\n\r\n  test('Should not Add Account without name', async () => {\r\n    const result = await request(app).post(MAIN_ROUTE)\r\n      .send({})\r\n      .set('authorization', `bearer ${user.token}`)\r\n    expect(result.status).toBe(400)\r\n    expect(result.body.error).toBe('The name is a required attribute')\r\n  })\r\n\r\n  test('Should return one Account for id', () => {\r\n    return app.db('accounts')\r\n      .insert({\r\n        name: 'Acc By Id',\r\n        user_id: user.id\r\n      }, ['id'])\r\n      .then(acc => request(app)\r\n        .get(`${MAIN_ROUTE}/${acc[0].id}`)\r\n        .set('authorization', `bearer ${user.token}`)\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(200)\r\n        expect(res.body.name).toBe('Acc By Id')    \r\n        expect(res.body.user_id).toBe(user.id)    \r\n      })\r\n  })\r\n\r\n  test('Should update an account', () => {\r\n    return app.db('accounts')\r\n      .insert({\r\n        name: 'Acc To Update',\r\n        user_id: user.id\r\n      }, ['id'])\r\n      .then(acc => request(app).put(`${MAIN_ROUTE}/${acc[0].id}`)\r\n        .set('authorization', `bearer ${user.token}`)\r\n        .send({\r\n          name: 'Acc Updated'\r\n        })\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(200)\r\n        expect(res.body.name).toBe('Acc Updated')\r\n      })\r\n  })\r\n\r\n  test('Should delete an account', () => {\r\n    return app.db('accounts')\r\n      .insert({\r\n        name: 'Acc To Remove',\r\n        user_id: user.id\r\n      }, ['id'])\r\n      .then(acc => request(app)\r\n        .delete(`${MAIN_ROUTE}/${acc[0].id}`)\r\n        .set('authorization', `bearer ${user.token}`)\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(204)\r\n      })\r\n  })\r\n\r\n  test('Should not add an Account duplicate', () => {\r\n    return app.db('accounts')\r\n      .insert({ name: 'Acc Use Duplicated', user_id: user.id })\r\n      .then(() => request(app)\r\n        .post(MAIN_ROUTE)\r\n        .set('authorization', `bearer ${user.token}`)\r\n        .send({ name: 'Acc Use Duplicated' })\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(400)\r\n        expect(res.body.error).toBe('We Found another account with an equal name')\r\n      })    \r\n  })\r\n\r\n  test('Should list only accounts for a user logged', () => {\r\n    return app.db('accounts')\r\n      .insert([\r\n        { name: 'Acc Use #1', user_id: user.id }, \r\n        { name: 'Acc Use #2', user_id: user2.id }, \r\n      ])\r\n      .then(() => request(app)\r\n        .get(MAIN_ROUTE)\r\n        .set('authorization', `bearer ${user.token}`)\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(200)\r\n        expect(res.body.length).toBe(1)\r\n        expect(res.body[0].name).toBe('Acc Use #1')\r\n      })    \r\n  })\r\n\r\n  test('Should not list account for another user not logged', () => {\r\n    return app.db('accounts')\r\n      .insert({ name: 'Acc By User #2', user_id: user2.id }, ['id'])\r\n      .then(acc => request(app)\r\n        .get(`${MAIN_ROUTE}/${acc[0].id}`)\r\n        .set('authorization', `bearer ${user.token}`)\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(403)\r\n        expect(res.body.error).toBe('This account cannot be accessed by the user who is logged in')\r\n      })    \r\n\r\n  })\r\n\r\n  test('Should not update account for another user not logged', () => {\r\n    \r\n  })\r\n\r\n  test('Should not delete account for another user not logged', () => {\r\n    \r\n  })\r\n\r\n})\r\n"
        }
    ]
}