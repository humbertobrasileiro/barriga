{
    "sourceFile": "test/routes/transaction.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1664193770757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664194394747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,42 @@\n         expect(res.body.ammount).toBe('100.00');\r\n     });\r\n   });\r\n \r\n+  test('Should Add input Transaction with value positive', () => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: -100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.acc_id).toBe(accUser1.id);\r\n+        expect(res.body.ammount).toBe('100.00');\r\n+    });\r\n+  });\r\n+\r\n+  test('Should Add output Transaction with value negative', () => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'O',\r\n+        date: new Date(),\r\n+        ammount: 100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.acc_id).toBe(accUser1.id);\r\n+        expect(res.body.ammount).toBe('-100.00');\r\n+    });\r\n+  });\r\n+\r\n   test('Should return one Transaction for id', async () => {\r\n     const id = await app.db('transactions')\r\n       .insert({\r\n         description: 'Trans for id',\r\n"
                },
                {
                    "date": 1664195284338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,43 @@\n         expect(res.body.ammount).toBe('-100.00');\r\n     });\r\n   });\r\n \r\n+  test('Should not Add Transaction without description', () => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: 100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('The description is a riquered attribute');\r\n+    });\r\n+  });\r\n+\r\n+  test('Should not Add Transaction without value', () => {\r\n+    \r\n+  });\r\n+\r\n+  test('Should not Add Transaction without date', () => {\r\n+    \r\n+  });\r\n+\r\n+  test('Should not Add Transaction without account', () => {\r\n+    \r\n+  });\r\n+\r\n+  test('Should not Add Transaction without type', () => {\r\n+    \r\n+  });\r\n+\r\n+  test('Should not Add Transaction with invalid type', () => {\r\n+    \r\n+  });\r\n+\r\n   test('Should return one Transaction for id', async () => {\r\n     const id = await app.db('transactions')\r\n       .insert({\r\n         description: 'Trans for id',\r\n"
                },
                {
                    "date": 1664196385746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,25 +152,88 @@\n     });\r\n   });\r\n \r\n   test('Should not Add Transaction without value', () => {\r\n-    \r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('The ammount is a riquered attribute');\r\n+    });\r\n   });\r\n \r\n   test('Should not Add Transaction without date', () => {\r\n-    \r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: 100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.acc_id).toBe(accUser1.id);\r\n+        expect(res.body.ammount).toBe('100.00');\r\n+    });\r\n   });\r\n \r\n   test('Should not Add Transaction without account', () => {\r\n-    \r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: 100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.acc_id).toBe(accUser1.id);\r\n+        expect(res.body.ammount).toBe('100.00');\r\n+    });\r\n   });\r\n \r\n   test('Should not Add Transaction without type', () => {\r\n-    \r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: 100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.acc_id).toBe(accUser1.id);\r\n+        expect(res.body.ammount).toBe('100.00');\r\n+    });\r\n   });\r\n \r\n   test('Should not Add Transaction with invalid type', () => {\r\n-    \r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({\r\n+        description: 'New T',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: 100,\r\n+        acc_id: accUser1.id\r\n+      })\r\n+      .then(res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.acc_id).toBe(accUser1.id);\r\n+        expect(res.body.ammount).toBe('100.00');\r\n+    });\r\n   });\r\n \r\n   test('Should return one Transaction for id', async () => {\r\n     const id = await app.db('transactions')\r\n"
                },
                {
                    "date": 1664196547712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,16 +172,14 @@\n       .set('authorization', `bearer ${user1.token}`)\r\n       .send({\r\n         description: 'New T',\r\n         type: 'I',\r\n-        date: new Date(),\r\n         ammount: 100,\r\n         acc_id: accUser1.id\r\n       })\r\n       .then(res => {\r\n-        expect(res.status).toBe(201);\r\n-        expect(res.body.acc_id).toBe(accUser1.id);\r\n-        expect(res.body.ammount).toBe('100.00');\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('The date is a riquered attribute');\r\n     });\r\n   });\r\n \r\n   test('Should not Add Transaction without account', () => {\r\n"
                },
                {
                    "date": 1664196603704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,15 +188,13 @@\n       .send({\r\n         description: 'New T',\r\n         type: 'I',\r\n         date: new Date(),\r\n-        ammount: 100,\r\n-        acc_id: accUser1.id\r\n+        ammount: 100\r\n       })\r\n       .then(res => {\r\n-        expect(res.status).toBe(201);\r\n-        expect(res.body.acc_id).toBe(accUser1.id);\r\n-        expect(res.body.ammount).toBe('100.00');\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('The account is a riquered attribute');\r\n     });\r\n   });\r\n \r\n   test('Should not Add Transaction without type', () => {\r\n"
                },
                {
                    "date": 1664196679406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,17 +201,15 @@\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n       .send({\r\n         description: 'New T',\r\n-        type: 'I',\r\n         date: new Date(),\r\n         ammount: 100,\r\n         acc_id: accUser1.id\r\n       })\r\n       .then(res => {\r\n-        expect(res.status).toBe(201);\r\n-        expect(res.body.acc_id).toBe(accUser1.id);\r\n-        expect(res.body.ammount).toBe('100.00');\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('The type is a riquered attribute');\r\n     });\r\n   });\r\n \r\n   test('Should not Add Transaction with invalid type', () => {\r\n"
                },
                {
                    "date": 1664196740525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,17 +216,16 @@\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n       .send({\r\n         description: 'New T',\r\n-        type: 'I',\r\n+        type: 'D',\r\n         date: new Date(),\r\n         ammount: 100,\r\n         acc_id: accUser1.id\r\n       })\r\n       .then(res => {\r\n-        expect(res.status).toBe(201);\r\n-        expect(res.body.acc_id).toBe(accUser1.id);\r\n-        expect(res.body.ammount).toBe('100.00');\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('This type of transaction is invalid');\r\n     });\r\n   });\r\n \r\n   test('Should return one Transaction for id', async () => {\r\n"
                },
                {
                    "date": 1664197971869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,29 @@\n   ], '*');\r\n   [ accUser1, accUser2 ] = accs;\r\n });\r\n \r\n+const validTransaction = {\r\n+  description: 'New T',\r\n+  type: 'I',\r\n+  date: new Date(),\r\n+  ammount: 100,\r\n+  acc_id: accUser1.id\r\n+};\r\n+\r\n+\r\n describe('Transactions test', () => {\r\n \r\n+  const testTemplate = (newData, errorMessage) => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({ ...validTransaction, ...newData})\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe(errorMessage);\r\n+    });\r\n+  };\r\n+\r\n   test('Should list only transactions of the user', () => {\r\n     return app.db('transactions').insert([\r\n       {\r\n         description: 'T1', \r\n"
                },
                {
                    "date": 1664198055448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,22 +155,11 @@\n         expect(res.body.ammount).toBe('-100.00');\r\n     });\r\n   });\r\n \r\n-  test('Should not Add Transaction without description', () => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({\r\n-        type: 'I',\r\n-        date: new Date(),\r\n-        ammount: 100,\r\n-        acc_id: accUser1.id\r\n-      })\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe('The description is a riquered attribute');\r\n-    });\r\n-  });\r\n+  test('Should not Add Transaction without description', () => \r\n+    testTemplate({ description: null }, 'The description is a riquered attribute')\r\n+  );\r\n \r\n   test('Should not Add Transaction without value', () => {\r\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n"
                },
                {
                    "date": 1664198118883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,19 +46,18 @@\n   ], '*');\r\n   [ accUser1, accUser2 ] = accs;\r\n });\r\n \r\n-const validTransaction = {\r\n-  description: 'New T',\r\n-  type: 'I',\r\n-  date: new Date(),\r\n-  ammount: 100,\r\n-  acc_id: accUser1.id\r\n-};\r\n+describe('Transactions test', () => {\r\n \r\n+  const validTransaction = {\r\n+    description: 'New T',\r\n+    type: 'I',\r\n+    date: new Date(),\r\n+    ammount: 100,\r\n+    acc_id: accUser1.id\r\n+  };\r\n \r\n-describe('Transactions test', () => {\r\n-\r\n   const testTemplate = (newData, errorMessage) => {\r\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n       .send({ ...validTransaction, ...newData})\r\n"
                },
                {
                    "date": 1664198411578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     description: 'New T',\r\n     type: 'I',\r\n     date: new Date(),\r\n     ammount: 100,\r\n-    acc_id: accUser1.id\r\n+    acc_id: ${accUser1.id}\r\n   };\r\n \r\n   const testTemplate = (newData, errorMessage) => {\r\n     return request(app).post(MAIN_ROUTE)\r\n"
                },
                {
                    "date": 1664198505555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,27 +46,27 @@\n   ], '*');\r\n   [ accUser1, accUser2 ] = accs;\r\n });\r\n \r\n-describe('Transactions test', () => {\r\n+const validTransaction = {\r\n+  description: 'New T',\r\n+  type: 'I',\r\n+  date: new Date(),\r\n+  ammount: 100,\r\n+  acc_id: accUser1.id\r\n+};\r\n \r\n-  const validTransaction = {\r\n-    description: 'New T',\r\n-    type: 'I',\r\n-    date: new Date(),\r\n-    ammount: 100,\r\n-    acc_id: ${accUser1.id}\r\n-  };\r\n+const testTemplate = (newData, errorMessage) => {\r\n+  return request(app).post(MAIN_ROUTE)\r\n+    .set('authorization', `bearer ${user1.token}`)\r\n+    .send({ ...validTransaction, ...newData})\r\n+    .then(res => {\r\n+      expect(res.status).toBe(400);\r\n+      expect(res.body.error).toBe(errorMessage);\r\n+  });\r\n+};\r\n \r\n-  const testTemplate = (newData, errorMessage) => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({ ...validTransaction, ...newData})\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe(errorMessage);\r\n-    });\r\n-  };\r\n+describe('Transactions test', () => {\r\n \r\n   test('Should list only transactions of the user', () => {\r\n     return app.db('transactions').insert([\r\n       {\r\n"
                },
                {
                    "date": 1664198555723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     });\r\n   });\r\n \r\n   test('Should not Add Transaction without description', () => \r\n-    testTemplate({ description: null }, 'The description is a riquered attribute')\r\n+    testTemplate({ description: null }, 'The description is a riquered attribute');\r\n   );\r\n \r\n   test('Should not Add Transaction without value', () => {\r\n     return request(app).post(MAIN_ROUTE)\r\n"
                },
                {
                    "date": 1664198603402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     });\r\n   });\r\n \r\n   test('Should not Add Transaction without description', () => \r\n-    testTemplate({ description: null }, 'The description is a riquered attribute');\r\n+    testTemplate({ description: null }, 'The description is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction without value', () => {\r\n     return request(app).post(MAIN_ROUTE)\r\n"
                },
                {
                    "date": 1664198732867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,28 +44,29 @@\n       user_id: user2.id\r\n     }   \r\n   ], '*');\r\n   [ accUser1, accUser2 ] = accs;\r\n+\r\n+  const validTransaction = {\r\n+    description: 'New T',\r\n+    type: 'I',\r\n+    date: new Date(),\r\n+    ammount: 100,\r\n+    acc_id: accUser1.id\r\n+  };\r\n+  \r\n+  const testTemplate = (newData, errorMessage) => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${user1.token}`)\r\n+      .send({ ...validTransaction, ...newData})\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe(errorMessage);\r\n+    });\r\n+  };\r\n+  \r\n });\r\n \r\n-const validTransaction = {\r\n-  description: 'New T',\r\n-  type: 'I',\r\n-  date: new Date(),\r\n-  ammount: 100,\r\n-  acc_id: accUser1.id\r\n-};\r\n-\r\n-const testTemplate = (newData, errorMessage) => {\r\n-  return request(app).post(MAIN_ROUTE)\r\n-    .set('authorization', `bearer ${user1.token}`)\r\n-    .send({ ...validTransaction, ...newData})\r\n-    .then(res => {\r\n-      expect(res.status).toBe(400);\r\n-      expect(res.body.error).toBe(errorMessage);\r\n-  });\r\n-};\r\n-\r\n describe('Transactions test', () => {\r\n \r\n   test('Should list only transactions of the user', () => {\r\n     return app.db('transactions').insert([\r\n"
                },
                {
                    "date": 1664198759642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,13 @@\n     date: new Date(),\r\n     ammount: 100,\r\n     acc_id: accUser1.id\r\n   };\r\n-  \r\n+    \r\n+});\r\n+\r\n+describe('Transactions test', () => {\r\n+\r\n   const testTemplate = (newData, errorMessage) => {\r\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n       .send({ ...validTransaction, ...newData})\r\n@@ -62,13 +66,9 @@\n         expect(res.status).toBe(400);\r\n         expect(res.body.error).toBe(errorMessage);\r\n     });\r\n   };\r\n-  \r\n-});\r\n \r\n-describe('Transactions test', () => {\r\n-\r\n   test('Should list only transactions of the user', () => {\r\n     return app.db('transactions').insert([\r\n       {\r\n         description: 'T1', \r\n"
                },
                {
                    "date": 1664198829872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,21 +45,21 @@\n     }   \r\n   ], '*');\r\n   [ accUser1, accUser2 ] = accs;\r\n \r\n-  const validTransaction = {\r\n-    description: 'New T',\r\n-    type: 'I',\r\n-    date: new Date(),\r\n-    ammount: 100,\r\n-    acc_id: accUser1.id\r\n-  };\r\n-    \r\n });\r\n \r\n describe('Transactions test', () => {\r\n \r\n   const testTemplate = (newData, errorMessage) => {\r\n+    const validTransaction = {\r\n+      description: 'New T',\r\n+      type: 'I',\r\n+      date: new Date(),\r\n+      ammount: 100,\r\n+      acc_id: accUser1.id\r\n+    };\r\n+      \r\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n       .send({ ...validTransaction, ...newData})\r\n       .then(res => {\r\n"
                },
                {
                    "date": 1664198932056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,22 +159,11 @@\n   test('Should not Add Transaction without description', () => \r\n     testTemplate({ description: null }, 'The description is a riquered attribute')\r\n   );\r\n \r\n-  test('Should not Add Transaction without value', () => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({\r\n-        description: 'New T',\r\n-        type: 'I',\r\n-        date: new Date(),\r\n-        acc_id: accUser1.id\r\n-      })\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe('The ammount is a riquered attribute');\r\n-    });\r\n-  });\r\n+  test('Should not Add Transaction without value', () => \r\n+    testTemplate({ ammount: null }, 'The ammount is a riquered attribute')\r\n+  );\r\n \r\n   test('Should not Add Transaction without date', () => {\r\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n"
                },
                {
                    "date": 1664199432096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,52 +163,19 @@\n   test('Should not Add Transaction without value', () => \r\n     testTemplate({ ammount: null }, 'The ammount is a riquered attribute')\r\n   );\r\n \r\n-  test('Should not Add Transaction without date', () => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({\r\n-        description: 'New T',\r\n-        type: 'I',\r\n-        ammount: 100,\r\n-        acc_id: accUser1.id\r\n-      })\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe('The date is a riquered attribute');\r\n-    });\r\n-  });\r\n+  test('Should not Add Transaction without date', () => \r\n+    testTemplate({ date: null }, 'The date is a riquered attribute')\r\n+  );\r\n \r\n-  test('Should not Add Transaction without account', () => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({\r\n-        description: 'New T',\r\n-        type: 'I',\r\n-        date: new Date(),\r\n-        ammount: 100\r\n-      })\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe('The account is a riquered attribute');\r\n-    });\r\n-  });\r\n+  test('Should not Add Transaction without account', () => \r\n+    testTemplate({ ammount: null }, 'The account is a riquered attribute')\r\n+  );\r\n \r\n-  test('Should not Add Transaction without type', () => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({\r\n-        description: 'New T',\r\n-        date: new Date(),\r\n-        ammount: 100,\r\n-        acc_id: accUser1.id\r\n-      })\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe('The type is a riquered attribute');\r\n-    });\r\n-  });\r\n+  test('Should not Add Transaction without type', () => \r\n+    testTemplate({ ammount: null }, 'The type is a riquered attribute')\r\n+  );\r\n \r\n   test('Should not Add Transaction with invalid type', () => {\r\n     return request(app).post(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${user1.token}`)\r\n"
                },
                {
                    "date": 1664199475684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,13 +168,13 @@\n     testTemplate({ date: null }, 'The date is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction without account', () => \r\n-    testTemplate({ ammount: null }, 'The account is a riquered attribute')\r\n+    testTemplate({ account: null }, 'The account is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction without type', () => \r\n-    testTemplate({ ammount: null }, 'The type is a riquered attribute')\r\n+    testTemplate({ type: null }, 'The type is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction with invalid type', () => {\r\n     return request(app).post(MAIN_ROUTE)\r\n"
                },
                {
                    "date": 1664199551236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     testTemplate({ date: null }, 'The date is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction without account', () => \r\n-    testTemplate({ account: null }, 'The account is a riquered attribute')\r\n+    testTemplate({ acc_id: null }, 'The account is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction without type', () => \r\n     testTemplate({ type: null }, 'The type is a riquered attribute')\r\n"
                },
                {
                    "date": 1664199607036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,23 +175,11 @@\n   test('Should not Add Transaction without type', () => \r\n     testTemplate({ type: null }, 'The type is a riquered attribute')\r\n   );\r\n \r\n-  test('Should not Add Transaction with invalid type', () => {\r\n-    return request(app).post(MAIN_ROUTE)\r\n-      .set('authorization', `bearer ${user1.token}`)\r\n-      .send({\r\n-        description: 'New T',\r\n-        type: 'D',\r\n-        date: new Date(),\r\n-        ammount: 100,\r\n-        acc_id: accUser1.id\r\n-      })\r\n-      .then(res => {\r\n-        expect(res.status).toBe(400);\r\n-        expect(res.body.error).toBe('This type of transaction is invalid');\r\n-    });\r\n-  });\r\n+  test('Should not Add Transaction with invalid type', () => \r\n+    testTemplate({ type: 'D' }, 'This type of transaction is invalid')\r\n+  );\r\n \r\n   test('Should return one Transaction for id', async () => {\r\n     const id = await app.db('transactions')\r\n       .insert({\r\n"
                },
                {
                    "date": 1664199629527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n     testTemplate({ type: null }, 'The type is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction with invalid type', () => \r\n-    testTemplate({ type: 'D' }, 'This type of transaction is invalid')\r\n+    testTemplate({ type: 'I' }, 'This type of transaction is invalid')\r\n   );\r\n \r\n   test('Should return one Transaction for id', async () => {\r\n     const id = await app.db('transactions')\r\n"
                },
                {
                    "date": 1664199651379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n     testTemplate({ type: null }, 'The type is a riquered attribute')\r\n   );\r\n \r\n   test('Should not Add Transaction with invalid type', () => \r\n-    testTemplate({ type: 'I' }, 'This type of transaction is invalid')\r\n+    testTemplate({ type: 'D' }, 'This type of transaction is invalid')\r\n   );\r\n \r\n   test('Should return one Transaction for id', async () => {\r\n     const id = await app.db('transactions')\r\n"
                },
                {
                    "date": 1664200939764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,5 +256,24 @@\n         expect(res.body.error).toBe('This feature cannot be accessed by the user who is logged in');\r\n       });   \r\n   });\r\n \r\n+  test('Should cannot remove Account if exists transactions', () => {\r\n+    return app.db('transactions')\r\n+      .insert({\r\n+        description: 'To Remove',\r\n+        type: 'I',\r\n+        date: new Date(),\r\n+        ammount: 500,\r\n+        acc_id: accUser1.id\r\n+      }, ['id'])\r\n+      .then(trans => request(app)\r\n+        .delete(`/v1/accounts/${accUser1.id}`)\r\n+        .set('authorization', `bearer ${user1.token}`)\r\n+      )\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe('this Account has transactions in database')\r\n+      });\r\n+  })\r\n+\r\n });\r\n"
                },
                {
                    "date": 1664201385250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,8 +270,9 @@\n         .delete(`/v1/accounts/${accUser1.id}`)\r\n         .set('authorization', `bearer ${user1.token}`)\r\n       )\r\n       .then(res => {\r\n+        console.log(res.body);\r\n         expect(res.status).toBe(400);\r\n         expect(res.body.error).toBe('this Account has transactions in database')\r\n       });\r\n   })\r\n"
                },
                {
                    "date": 1664201486866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n         date: new Date(),\r\n         ammount: 500,\r\n         acc_id: accUser1.id\r\n       }, ['id'])\r\n-      .then(trans => request(app)\r\n+      .then(() => request(app)\r\n         .delete(`/v1/accounts/${accUser1.id}`)\r\n         .set('authorization', `bearer ${user1.token}`)\r\n       )\r\n       .then(res => {\r\n"
                },
                {
                    "date": 1664201556159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,8 @@\n         .delete(`/v1/accounts/${accUser1.id}`)\r\n         .set('authorization', `bearer ${user1.token}`)\r\n       )\r\n       .then(res => {\r\n-        console.log(res.body);\r\n         expect(res.status).toBe(400);\r\n         expect(res.body.error).toBe('this Account has transactions in database')\r\n       });\r\n   })\r\n"
                }
            ],
            "date": 1664193770757,
            "name": "Commit-0",
            "content": "const request = require('supertest');\r\nconst app = require('../../src/app');\r\nconst jwt = require('jwt-simple');\r\n\r\nconst MAIN_ROUTE = '/v1/transactions';\r\n\r\nlet user1;\r\nlet accUser1;\r\nlet user2;\r\nlet accUser2;\r\n\r\nbeforeAll(async () => {\r\n  await app.db('transactions').del();\r\n  await app.db('accounts').del();\r\n  await app.db('users').del();\r\n\r\n  // Add users for test\r\n  const users = await app.db('users').insert([\r\n    { \r\n      name: 'User #1', \r\n      mail: 'user1@mail.com', \r\n      passwd: '$2a$10$7C5k85zM22XOrO7t5ZeXF.a.9vJ7diRyfsISeKIBm0ksw3JNbbvMi'\r\n    },\r\n    { \r\n      name: 'User #2', \r\n      mail: 'user2@mail.com', \r\n      passwd: '$2a$10$7C5k85zM22XOrO7t5ZeXF.a.9vJ7diRyfsISeKIBm0ksw3JNbbvMi'\r\n    }\r\n  ], '*');\r\n\r\n  [ user1, user2 ] = users;\r\n\r\n  delete user1.passwd;\r\n  user1.token = jwt.encode(user1, 'Segredo!');\r\n\r\n  // Add accounts for test\r\n  const accs = await app.db('accounts').insert([\r\n    {\r\n      name: 'Acc #1', \r\n      user_id: user1.id,\r\n    },\r\n    {\r\n      name: 'Acc #2', \r\n      user_id: user2.id\r\n    }   \r\n  ], '*');\r\n  [ accUser1, accUser2 ] = accs;\r\n});\r\n\r\ndescribe('Transactions test', () => {\r\n\r\n  test('Should list only transactions of the user', () => {\r\n    return app.db('transactions').insert([\r\n      {\r\n        description: 'T1', \r\n        date: new Date(), \r\n        ammount: 100, \r\n        type: 'I', \r\n        acc_id: accUser1.id\r\n      },\r\n      {\r\n        description: 'T2', \r\n        date: new Date(), \r\n        ammount: 200, \r\n        type: 'O', \r\n        acc_id: accUser2.id\r\n      }\r\n    ])\r\n    .then(() => request(app)\r\n      .get(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user1.token}`)\r\n    )\r\n    .then(res => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body).toHaveLength(1);\r\n      expect(res.body[0].description).toBe('T1');\r\n    });\r\n  });\r\n\r\n  test('Should work with snippets', () => {\r\n    return request(app).get(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user1.token}`)\r\n      .then(res => {\r\n        expect(res.status).toBe(200);\r\n        expect(res.body[0].description).toBe('T1');\r\n    });\r\n  });\r\n\r\n  test('Should Add Transaction with success', () => {\r\n    return request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user1.token}`)\r\n      .send({\r\n        description: 'New T',\r\n        type: 'I',\r\n        date: new Date(),\r\n        ammount: 100,\r\n        acc_id: accUser1.id\r\n      })\r\n      .then(res => {\r\n        expect(res.status).toBe(201);\r\n        expect(res.body.acc_id).toBe(accUser1.id);\r\n        expect(res.body.ammount).toBe('100.00');\r\n    });\r\n  });\r\n\r\n  test('Should return one Transaction for id', async () => {\r\n    const id = await app.db('transactions')\r\n      .insert({\r\n        description: 'Trans for id',\r\n        type: 'I',\r\n        date: new Date(),\r\n        ammount: 300,\r\n        acc_id: accUser1.id\r\n      }, ['id']);\r\n\r\n    const result = await request(app)\r\n      .get(`${MAIN_ROUTE}/${id[0].id}`)\r\n      .set('authorization', `bearer ${user1.token}`)\r\n    \r\n    expect(result.status).toBe(200);\r\n    expect(result.body.description).toBe('Trans for id');  \r\n    expect(result.body.id).toBe(id[0].id)\r\n  });\r\n\r\n  test('Should update an transaction', () => {\r\n    return app.db('transactions')\r\n      .insert({\r\n        description: 'Update transaction',\r\n        type: 'I',\r\n        date: new Date(),\r\n        ammount: 400,\r\n        acc_id: accUser1.id\r\n      }, ['id'])\r\n      .then(trans => request(app).put(`${MAIN_ROUTE}/${trans[0].id}`)\r\n        .set('authorization', `bearer ${user1.token}`)\r\n        .send({\r\n          description: 'Updated transaction'\r\n        })\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(200);\r\n        expect(res.body.description).toBe('Updated transaction');\r\n      });\r\n  });\r\n\r\n  test('Should delete an transaction', () => {\r\n    return app.db('transactions')\r\n      .insert({\r\n        description: 'Transaction to Remove',\r\n        type: 'I',\r\n        date: new Date(),\r\n        ammount: 500,\r\n        acc_id: accUser1.id\r\n      }, ['id'])\r\n      .then(trans => request(app)\r\n        .delete(`${MAIN_ROUTE}/${trans[0].id}`)\r\n        .set('authorization', `bearer ${user1.token}`)\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(204);\r\n      });\r\n  });\r\n\r\n  test('Should not delete transaction for another user not logged', () => {\r\n    return app.db('transactions')\r\n      .insert({\r\n        description: 'Transaction to Remove',\r\n        type: 'I',\r\n        date: new Date(),\r\n        ammount: 500,\r\n        acc_id: accUser2.id\r\n      }, ['id'])\r\n      .then(trans => request(app)\r\n        .delete(`${MAIN_ROUTE}/${trans[0].id}`)\r\n        .set('authorization', `bearer ${user1.token}`)\r\n      )\r\n      .then(res => {\r\n        expect(res.status).toBe(403);\r\n        expect(res.body.error).toBe('This feature cannot be accessed by the user who is logged in');\r\n      });   \r\n  });\r\n\r\n});\r\n"
        }
    ]
}