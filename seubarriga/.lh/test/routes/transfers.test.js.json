{
    "sourceFile": "test/routes/transfers.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1664213386636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664213931961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n const app = require('../../src/app');\r\n \r\n const MAIN_ROUTE = '/v1/transfers';\r\n \r\n+const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6LTEsIm5hbWUiOiJVc2VyICMxIiwibWFpbCI6InVzZXIxQG1haWwuY29tIn0.W6jmuFPwZOhQfhBo15kBUfqWCS4UtpiJQ1f7m6q_4xs';\r\n+\r\n describe('Transfers Test', () => {\r\n   \r\n   test('Should only list transfers of this logged in user', () => {\r\n     request(app).get(MAIN_ROUTE)\r\n"
                },
                {
                    "date": 1664813412071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,346 @@\n const request = require('supertest');\r\n const app = require('../../src/app');\r\n \r\n const MAIN_ROUTE = '/v1/transfers';\r\n+const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAwMDAsIm5hbWUiOiJVc2VyICMxIiwibWFpbCI6InVzZXIxQG1haWwuY29tIn0.QMgvo_lPe0Rdxpx7cay_hIkDAbjCK_--VD2fP0NTTqk';\r\n \r\n-const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6LTEsIm5hbWUiOiJVc2VyICMxIiwibWFpbCI6InVzZXIxQG1haWwuY29tIn0.W6jmuFPwZOhQfhBo15kBUfqWCS4UtpiJQ1f7m6q_4xs';\r\n+beforeAll(async () => {\r\n+  await app.db.seed.run();\r\n+});\r\n \r\n describe('Transfers Test', () => {\r\n   \r\n   test('Should only list transfers of this logged in user', () => {\r\n-    request(app).get(MAIN_ROUTE)\r\n+    return request(app).get(MAIN_ROUTE)\r\n       .set('authorization', `bearer ${TOKEN}`)\r\n       .then(res => {\r\n         expect(res.status).toBe(200);\r\n         expect(res.body).toHaveLength(1);\r\n\\ No newline at end of file\n         expect(res.body[0].description).toBe('Transfer #1');\r\n     });\r\n-  })\r\n+  });\r\n \r\n-})\n+  test('Should Add a Transfer with success', () => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .send({\r\n+        description: 'Transfer with success',\r\n+        user_id: 10000,\r\n+        acc_ori_id: 10000,\r\n+        acc_des_id: 10001,\r\n+        ammount: 100,\r\n+        date: new Date()\r\n+      })\r\n+      .then(async res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.description).toBe('Transfer with success');\r\n+\r\n+        const transactions = await app.db('transactions').where({ transfer_id: res.body.id });\r\n+        expect(transactions).toHaveLength(2);\r\n+        expect(transactions[0].description).toBe('Transfer to acc #10001');\r\n+        expect(transactions[1].description).toBe('Transfer from acc #10000');\r\n+        expect(transactions[0].ammount).toBe('-100.00');\r\n+        expect(transactions[1].ammount).toBe('100.00');\r\n+        expect(transactions[0].acc_id).toBe(10000);\r\n+        expect(transactions[1].acc_id).toBe(10001);\r\n+    });\r\n+  });\r\n+\r\n+})\r\n+\r\n+describe('When saving a valid transfer...', () => {\r\n+\r\n+  let transferId;\r\n+  let income;\r\n+  let outcome;\r\n+\r\n+  test('Should return 201 and the transfer data', () => {\r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .send({\r\n+        description: 'Regular Transfer',\r\n+        user_id: 10000,\r\n+        acc_ori_id: 10000,\r\n+        acc_des_id: 10001,\r\n+        ammount: 100,\r\n+        date: new Date()\r\n+      })\r\n+      .then(async res => {\r\n+        expect(res.status).toBe(201);\r\n+        expect(res.body.description).toBe('Regular Transfer');\r\n+        transferId = res.body.id;\r\n+      });\r\n+  });\r\n+\r\n+  test('Equivalent transactions must have been generated', async () => {\r\n+    const transactions = await app.db('transactions')\r\n+      .where({ transfer_id: transferId })\r\n+      .orderBy('ammount');\r\n+    expect(transactions).toHaveLength(2);\r\n+    [ outcome, income ] = transactions;\r\n+  });\r\n+\r\n+  test('The transaction of output should be negative', () => {\r\n+    expect(outcome.description).toBe('Transfer to acc #10001');\r\n+    expect(outcome.ammount).toBe('-100.00');\r\n+    expect(outcome.acc_id).toBe(10000);\r\n+    expect(outcome.type).toBe('O');\r\n+  });\r\n+\r\n+  test('The transaction of input should be positive', () => {\r\n+    expect(income.description).toBe('Transfer from acc #10000');\r\n+    expect(income.ammount).toBe('100.00');\r\n+    expect(income.acc_id).toBe(10001);\r\n+    expect(income.type).toBe('I');\r\n+  });\r\n+\r\n+  test('Both must have completed status.', () => {\r\n+    expect(income.status).toBe(true);\r\n+    expect(outcome.status).toBe(true);\r\n+  });\r\n+\r\n+  test('Both must reference the transfer that originated', () => {\r\n+    expect(income.transfer_id).toBe(transferId);\r\n+    expect(outcome.transfer_id).toBe(transferId);\r\n+  });\r\n+\r\n+});\r\n+\r\n+describe('When trying to save an invalid transfer...', () => {\r\n+\r\n+  const testTemplate = (newData, errorMessage) => {\r\n+    const validTransfer = {\r\n+      description: 'Test Transfer invalid',\r\n+      user_id: 10000,\r\n+      acc_ori_id: 10000,\r\n+      acc_des_id: 10001,\r\n+      ammount: 100,\r\n+      date: new Date()\r\n+    };\r\n+      \r\n+    return request(app).post(MAIN_ROUTE)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .send({ ...validTransfer, ...newData})\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe(errorMessage);\r\n+    });\r\n+  };\r\n+\r\n+  test('Should not Add Transfer without description', () =>\r\n+    testTemplate({ description: null }, 'The description is a required attribute')\r\n+  );\r\n+\r\n+  test('Should not Add Transfer without ammount', () => \r\n+    testTemplate({ ammount: null }, 'The ammount is a required attribute')  \r\n+  );\r\n+\r\n+  test('Should not Add Transfer without date', () => \r\n+    testTemplate({ date: null }, 'The date is a required attribute')  \r\n+  );\r\n+\r\n+  test('Should not Add Transfer without originating account', () => {\r\n+    testTemplate({ acc_ori_id: null }, 'The originating account is a required attribute')  \r\n+  });\r\n+\r\n+  test('Should not Add Transfer without destination account', () => {\r\n+    testTemplate({ acc_des_id: null }, 'The destination account is a required attribute')  \r\n+  });\r\n+\r\n+  test('Should not Add Transfer if account origin and destiny as equal', () => \r\n+    testTemplate({ acc_des_id: 10000 }, 'The account origin and destiny cannot equal')\r\n+  );\r\n+\r\n+  test('Should not Add Transfer if an account is another user', () => \r\n+    testTemplate({ user_id: 10001 }, 'Accounts belong to another user')\r\n+  );\r\n+\r\n+  test('Should return a transfer by id', () => {\r\n+    return request(app).get(`${MAIN_ROUTE}/10000`)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .then(res => {\r\n+      expect(res.status).toBe(200);\r\n+      expect(res.body.description).toBe('Transfer #1');\r\n+    });\r\n+  });\r\n+  \r\n+});\r\n+\r\n+describe('When updating a valid transfer...', () => {\r\n+\r\n+  let transferId;\r\n+  let income;\r\n+  let outcome;\r\n+\r\n+  test('Should update a valid transaction', async () => {\r\n+    const result = await request(app).put(`${MAIN_ROUTE}/10000`)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .send({\r\n+        description: 'Updated transaction',\r\n+        user_id: 10000,\r\n+        acc_ori_id: 10000,\r\n+        acc_des_id: 10001,\r\n+        ammount: 500,\r\n+        date: new Date()\r\n+      });\r\n+\r\n+      expect(result.status).toBe(200);\r\n+      expect(result.body.description).toBe('Updated transaction');\r\n+      expect(result.body.ammount).toBe('500.00');\r\n+      transferId = result.body.id;\r\n+  });\r\n+\r\n+  test('Equivalent transactions must have been generated', async () => {\r\n+    const transactions = await app.db('transactions')\r\n+      .where({ transfer_id: transferId })\r\n+      .orderBy('ammount');\r\n+    expect(transactions).toHaveLength(2);\r\n+    [ outcome, income ] = transactions;\r\n+  });\r\n+\r\n+  test('The transaction of output should be negative', () => {\r\n+    expect(outcome.description).toBe('Transfer to acc #10001');\r\n+    expect(outcome.ammount).toBe('-500.00');\r\n+    expect(outcome.acc_id).toBe(10000);\r\n+    expect(outcome.type).toBe('O');\r\n+  });\r\n+\r\n+  test('The transaction of input should be positive', () => {\r\n+    expect(income.description).toBe('Transfer from acc #10000');\r\n+    expect(income.ammount).toBe('500.00');\r\n+    expect(income.acc_id).toBe(10001);\r\n+    expect(income.type).toBe('I');\r\n+  });\r\n+\r\n+  test('Both must reference the transfer that originated', () => {\r\n+    expect(income.transfer_id).toBe(transferId);\r\n+    expect(outcome.transfer_id).toBe(transferId);\r\n+  });\r\n+\r\n+});\r\n+\r\n+describe('When trying to update an invalid transfer...', () => {\r\n+\r\n+  const template = (newData, errorMessage) => {     \r\n+    return request(app).put(`${MAIN_ROUTE}/10000`)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .send(newData)\r\n+      .then(res => {\r\n+        expect(res.status).toBe(400);\r\n+        expect(res.body.error).toBe(errorMessage);\r\n+    });\r\n+  };\r\n+\r\n+  test('Should not Update Transfer without description', () =>\r\n+    template({ \r\n+      user_id: 10000,\r\n+      acc_ori_id: 10000,\r\n+      acc_des_id: 10001,\r\n+      ammount: 500,\r\n+      date: new Date()\r\n+    }, 'The description is a required attribute')\r\n+  );\r\n+\r\n+  test('Should not Update Transfer without ammount', () => \r\n+    template({\r\n+      description: 'Updating transfer',\r\n+      user_id: 10000,\r\n+      acc_ori_id: 10000,\r\n+      acc_des_id: 10001,\r\n+      date: new Date()\r\n+    }, 'The ammount is a required attribute')  \r\n+  );\r\n+\r\n+  test('Should not Update Transfer without date', () => \r\n+    template({\r\n+      description: 'Updating transfer',\r\n+      user_id: 10000,\r\n+      acc_ori_id: 10000,\r\n+      acc_des_id: 10001,\r\n+      ammount: 500\r\n+    }, 'The date is a required attribute')  \r\n+  );\r\n+\r\n+  test('Should not Update Transfer without originating account', () => {\r\n+    template({ \r\n+      description: 'Updating transfer',\r\n+      user_id: 10000,\r\n+      acc_des_id: 10001,\r\n+      ammount: 500,\r\n+      date: new Date()\r\n+    }, 'The originating account is a required attribute')  \r\n+  });\r\n+\r\n+  test('Should not Update Transfer without destination account', () => {\r\n+    template({ \r\n+      description: 'Updating transfer',\r\n+      user_id: 10000,\r\n+      acc_ori_id: 10000,\r\n+      ammount: 500,\r\n+      date: new Date()\r\n+    }, 'The destination account is a required attribute')  \r\n+  });\r\n+\r\n+  test('Should not Update Transfer if account origin and destiny as equal', () => \r\n+    template({ \r\n+      description: 'Updating transfer',\r\n+      user_id: 10000,\r\n+      acc_ori_id: 10000,\r\n+      acc_des_id: 10000,\r\n+      ammount: 500,\r\n+      date: new Date()\r\n+    }, 'The account origin and destiny cannot equal')\r\n+  );\r\n+\r\n+  test('Should not Update Transfer if an account is another user', () => \r\n+    template({ \r\n+      description: 'Updating transfer',\r\n+      user_id: 10001,\r\n+      acc_ori_id: 10000,\r\n+      acc_des_id: 10001,\r\n+      ammount: 500,\r\n+      date: new Date()\r\n+    }, 'Accounts belong to another user')\r\n+  );\r\n+  \r\n+});\r\n+\r\n+describe('When trying to remove a transfer...', () => {\r\n+  \r\n+  test('Should return status 204', () => {\r\n+    return request(app)\r\n+      .delete(`${MAIN_ROUTE}/10000`)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .then(res => {\r\n+        expect(res.status).toBe(204);\r\n+      });\r\n+  });\r\n+\r\n+  test('The record must have been removed from the database', () => {\r\n+    return app.db('transfers').where({ id: 10000 })\r\n+      .then(result => {\r\n+        expect(result).toHaveLength(0);\r\n+      });\r\n+  });\r\n+\r\n+  test('Associated transactions must have been removed', () => {\r\n+    return app.db('transactions').where({ transfer_id: 10000 })\r\n+      .then(result => {\r\n+        expect(result).toHaveLength(0);\r\n+      });\r\n+  });\r\n+\r\n+});\r\n+\r\n+describe('When trying to access an another user...', () => {\r\n+  \r\n+  test('Should not return a transfer made by another user', () => {\r\n+    return request(app).get(`${MAIN_ROUTE}/10001`)\r\n+      .set('authorization', `bearer ${TOKEN}`)\r\n+      .then(res => {\r\n+        expect(res.status).toBe(403);\r\n+        expect(res.body.error).toBe('This feature cannot be accessed by the user who is logged in');\r\n+    });\r\n+  });\r\n+\r\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1664213386635,
            "name": "Commit-0",
            "content": "const request = require('supertest');\r\nconst app = require('../../src/app');\r\n\r\nconst MAIN_ROUTE = '/v1/transfers';\r\n\r\ndescribe('Transfers Test', () => {\r\n  \r\n  test('Should only list transfers of this logged in user', () => {\r\n    request(app).get(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${TOKEN}`)\r\n      .then(res => {\r\n        expect(res.status).toBe(200);\r\n        expect(res.body).toHaveLength(1);\r\n        expect(res.body[0].description).toBe('Transfer #1');\r\n    });\r\n  })\r\n\r\n})"
        }
    ]
}